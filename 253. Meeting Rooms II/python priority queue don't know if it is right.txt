# Definition for an interval.

# class Interval(object):

#     def __init__(self, s=0, e=0):

#         self.start = s

#         self.end = e


class Solution(object):

    def minMeetingRooms(self, intervals):

        """

        :type intervals: List[Interval]

        :rtype: int

        """

        if not intervals: return 0

        # sort the intervals by the start time

        intervals.sort(key = lambda i: i.start)

        # use a min heap to track the minmum end time of merged intervals

        heap = queue.PriorityQueue()

        # start with the first meeting

        heap.put((itervals[0].end, intervals[0]))

        for i in range(len(intervals)):

            # get the room that finished earliest

            interval = heap.get()

            if intervals[i].start >= interval[1].end:

                #if current meeting starts right after

                # there is no need for a new room, merge the intervals

                interval[0] = intervals[i].end

            else:

                heap.put((intervals[i].end, intervals[i]))

            heap.put(interval)

         return len(heap)