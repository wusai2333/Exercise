<<<<<<< HEAD
class Solution(object):
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) < 2: return 0
        # m is the maximal number in the nums
        m = nums[0]
        for num in nums:
            m = max(num, m)
        
        exp = 1 # 1, 10, 100, 1000....
        R = 10
        
        aux = [0]*len(nums)
        
        while m / exp > 0: # go through 
            count = [0]*R
            
            for i in range(len(nums)):
                count[(nums[i] / exp) % 10] += 1
                
            for i in range(1, len(count)):
                count[i] += count[i - 1]
                
            for i in range(len(nums)-1, -1, -1):
                aux[count[(nums[i] / exp) % 10] - 1] = nums[i]
                count[(nums[i] / exp) % 10] -= 1
                
            for i in range(len(nums)):
                nums[i] = aux[i]
            
            exp *= 10
            
        maxGap = 0
        for i in range(1, len(nums)):
            maxGap = max(maxGap, nums[i] - nums[i-1])
            
        return maxGap

You can look at radix sort visualization here before reading the code:
https://www.cs.usfca.edu/~galles/visualization/RadixSort.html

1.The first step is to find the maximum value in nums array, it will
be the threshold to end while loop.
2.Then use the radix sort algorithm to sort based on each digit from Least Significant Bit
(LSB) to Most Significant Bit (MSB), that's exactly what's showing
in the link.
3.(nums[i] / exp) % 10 is used to get the digit, for each digit, basically the digit itself serves as the index to
access the count array. Count array stores the index to access aux
array which stores the numbers after sorting based on the current
digit.
4.Finally, find the maximum gap from sorted array.
=======
class Solution(object):
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) < 2: return 0
        # m is the maximal number in the nums
        m = nums[0]
        for num in nums:
            m = max(num, m)
        
        exp = 1 # 1, 10, 100, 1000....
        R = 10
        
        aux = [0]*len(nums)
        
        while m / exp > 0: # go through 
            count = [0]*R
            
            for i in range(len(nums)):
                count[(nums[i] / exp) % 10] += 1
                
            for i in range(1, len(count)):
                count[i] += count[i - 1]
                
            for i in range(len(nums)-1, -1, -1):
                aux[count[(nums[i] / exp) % 10] - 1] = nums[i]
                count[(nums[i] / exp) % 10] -= 1
                
            for i in range(len(nums)):
                nums[i] = aux[i]
            
            exp *= 10
            
        maxGap = 0
        for i in range(1, len(nums)):
            maxGap = max(maxGap, nums[i] - nums[i-1])
            
        return maxGap

You can look at radix sort visualization here before reading the code:
https://www.cs.usfca.edu/~galles/visualization/RadixSort.html

1.The first step is to find the maximum value in nums array, it will
be the threshold to end while loop.
2.Then use the radix sort algorithm to sort based on each digit from Least Significant Bit
(LSB) to Most Significant Bit (MSB), that's exactly what's showing
in the link.
3.(nums[i] / exp) % 10 is used to get the digit, for each digit, basically the digit itself serves as the index to
access the count array. Count array stores the index to access aux
array which stores the numbers after sorting based on the current
digit.
4.Finally, find the maximum gap from sorted array.
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
Time and space complexities are both O(n). (Actually time is O(10n) at worst case for Integer.MAX_VALUE 2147483647)