# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution(object):
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        if not intervals: return [newInterval]
        i = 0
        while i < len(intervals) and intervals[i].end < newInterval.start:
            i += 1
        newstart = i

        while i < len(intervals) and intervals[i].start <= newInterval.end:
            i += 1
        newend = i
        
        if newstart == len(intervals):
            intervals.append(newInterval)
            
        elif newstart == newend:
            intervals.insert(newstart, newInterval)

        #newstart must be smaller or equal to newend     
        else:
            if newend == len(intervals):
                newInterval.start = min(newInterval.start, intervals[newstart].start)
                newInterval.end = max(newInterval.end, intervals[newend - 1].end)
                del intervals[newstart:]
                intervals.insert(newstart, newInterval)
            else:
                newInterval.start = min(newInterval.start, intervals[newstart].start)
                newInterval.end = max(newInterval.end, intervals[newend - 1].end)
                del intervals[newstart: newend]
                intervals.insert(newstart, newInterval)
        return intervals
            