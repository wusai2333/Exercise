<<<<<<< HEAD
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root : return 0
        depth = 1
        queue = collections.deque()
        magic = TreeNode(0)
        queue.append(root)
        queue.append(magic)
        while queue:
            temp = queue.popleft()
            if temp == magic:
                if queue:
                    depth += 1
                    queue.append(magic)
                    continue;
            if temp.left == None and temp.right == None:
                return depth
            if temp.left:
                queue.append(temp.left)
            if temp.right:
                queue.append(temp.right)
        return depth
=======
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root : return 0
        depth = 1
        queue = collections.deque()
        magic = TreeNode(0)
        queue.append(root)
        queue.append(magic)
        while queue:
            temp = queue.popleft()
            if temp == magic:
                if queue:
                    depth += 1
                    queue.append(magic)
                    continue;
            if temp.left == None and temp.right == None:
                return depth
            if temp.left:
                queue.append(temp.left)
            if temp.right:
                queue.append(temp.right)
        return depth
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
                