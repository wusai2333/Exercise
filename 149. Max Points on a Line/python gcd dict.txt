# Definition for a point.
# class Point(object):
#     def __init__(self, a=0, b=0):
#         self.x = a
#         self.y = b

class Solution(object):
    def maxPoints(self, points):
        """
        :type points: List[Point]
        :rtype: int
        """
        if len(points) <= 2: return len(points)
        d = collections.defaultdict(int)
        result = 0
        for i in range(len(points)):
            d.clear()
            overlap, curmax = 0, 0
            for j in range(i+1, len(points)):
                dx, dy = points[j].x - points[i].x, points[j].y - points[i].y
                if dx == 0 and dy == 0:
                    overlap += 1
                    continue
                gcd = self.getGcd(dx, dy)
                dx /= gcd
                dy /= gcd
                d[(dx,dy)] += 1
                curmax = max(curmax, d[(dx,dy)])
            result = max(result, curmax + overlap + 1)
        return result
        
    def getGcd(self, a, b):
        if b == 0: return a
        elif a % b == 0:
            return b
        else:
            return self.getGcd(b, a%b)