<<<<<<< HEAD
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        return haystack.find(needle)

purpose of this problem is to implement the find algorithm so the above solution is not valid
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        m, n = len(haystack), len(needle)
        for i in range (m - n + 1):
            if haystack[i:i+n] == needle:
                return i
        return -1
=======
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        return haystack.find(needle)

purpose of this problem is to implement the find algorithm so the above solution is not valid
class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        m, n = len(haystack), len(needle)
        for i in range (m - n + 1):
            if haystack[i:i+n] == needle:
                return i
        return -1
>>>>>>> origin/master
            