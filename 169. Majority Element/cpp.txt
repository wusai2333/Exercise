1.HashMap
class Solution {
public:
    int majorityElement(vector<int>& nums) {

        int res = 0;
        std::unordered_map<int, int> counts;
        int n = nums.size();
        for (int i = 0; i < n; i++){
            counts[nums[i]]++;
            if (counts[nums[i]] > n/2) {
                res = nums[i];
                break;
            }
        }
        return res;
    }
};

2.Sorting
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        nth_element(nums.begin(), nums.begin() + nums.size()/2, nums.end());
        return nums[nums.size()/2];
    }
};

3.Randomization
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        srand(unsigned(time(NULL)));
        while(true) {
            int idx = rand() % n;
            int candidate = nums[idx];
            int counts = 0;
            for (int i = 0; i < n; i++) {
                if (nums[i] == candidate)
                    counts++;
                if (counts > n/2) return candidate;
            }
            
        }
    }
};

4.Divide and conquer
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        return majority(nums, 0, nums.size() - 1);
    }
private:
    int majority(vector<int>& nums, int left, int right){
        if(left == right) return nums[left];
        int mid = left + (right - left) >> 1;
        int lm = majority(nums, left, mid);
        int rm = majority(nums, mid + 1, right);
        if (rm == lm) return lm;
        return count(nums.begin() + left, nums.begin() + right + 1, lm) > count(nums.begin() + left, nums.begin() + right + 1, rm)? lm: rm; 
    }
};

5.Moore voting algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int major = 0, count = 0, n = nums.size();
        for(int i = 0; i < n; i++) {
            if(count == 0) {
                major = nums[i];
                count =1;
            }
            else if(major == nums[i])
                count++;
            else count--;
        }
        return major;
    }
};