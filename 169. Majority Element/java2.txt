<<<<<<< HEAD

public class Solution {
    public int majorityElement(int[] nums) {
	//sort
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
public class Solution {
    public int majorityElement(int[] nums) {
        //Hashtable
        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
        int res = 0;
        
        for (int num: nums) {
            if (!myMap.containsKey(num))
                myMap.put(num, 1);
            else 
                myMap.put(num, myMap.get(num) + 1);
            if(myMap.get(num)>nums.length/2) {
                res = num;
                break;
            }
        }
        return res;
    }
}

public class Solution {
    public int majorityElement(int[] nums) {
        //Moore voting algorithm
       int count = 0, res = 0;
       
       for(int num: nums) {
            if(count == 0)
                res = num;
            else if(res == num)
                count++;
            else count--;
       }
       return res;
    }
=======

public class Solution {
    public int majorityElement(int[] nums) {
	//sort
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
public class Solution {
    public int majorityElement(int[] nums) {
        //Hashtable
        Map<Integer, Integer> myMap = new HashMap<Integer, Integer>();
        int res = 0;
        
        for (int num: nums) {
            if (!myMap.containsKey(num))
                myMap.put(num, 1);
            else 
                myMap.put(num, myMap.get(num) + 1);
            if(myMap.get(num)>nums.length/2) {
                res = num;
                break;
            }
        }
        return res;
    }
}

public class Solution {
    public int majorityElement(int[] nums) {
        //Moore voting algorithm
       int count = 0, res = 0;
       
       for(int num: nums) {
            if(count == 0)
                res = num;
            else if(res == num)
                count++;
            else count--;
       }
       return res;
    }
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
}