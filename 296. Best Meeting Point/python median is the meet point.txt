<<<<<<< HEAD
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        I = []
        J = []
        def getMin(l):
            ret = 0
            l.sort()
            i = 0
            while i < len(l)/2:
                ret += l[~i] - l[i]
                i += 1
            return ret
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    I.append(i)
                    J.append(j)
        return getMin(I) + getMin(J)

public int minTotalDistance(int[][] grid) {
    int m = grid.length;
    int n = grid[0].length;
    
    List<Integer> I = new ArrayList<>(m);
    List<Integer> J = new ArrayList<>(n);
    
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(grid[i][j] == 1){
                I.add(i);
                J.add(j);
            }
        }
    }
    
    return getMin(I) + getMin(J);
}

private int getMin(List<Integer> list){
    int ret = 0;
    
    Collections.sort(list);
    
    int i = 0;
    int j = list.size() - 1;
    while(i < j){
        ret += list.get(j--) - list.get(i++);
    }
    
    return ret;
=======
class Solution(object):
    def minTotalDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        I = []
        J = []
        def getMin(l):
            ret = 0
            l.sort()
            i = 0
            while i < len(l)/2:
                ret += l[~i] - l[i]
                i += 1
            return ret
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    I.append(i)
                    J.append(j)
        return getMin(I) + getMin(J)

public int minTotalDistance(int[][] grid) {
    int m = grid.length;
    int n = grid[0].length;
    
    List<Integer> I = new ArrayList<>(m);
    List<Integer> J = new ArrayList<>(n);
    
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(grid[i][j] == 1){
                I.add(i);
                J.add(j);
            }
        }
    }
    
    return getMin(I) + getMin(J);
}

private int getMin(List<Integer> list){
    int ret = 0;
    
    Collections.sort(list);
    
    int i = 0;
    int j = list.size() - 1;
    while(i < j){
        ret += list.get(j--) - list.get(i++);
    }
    
    return ret;
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
}