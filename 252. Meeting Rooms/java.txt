<<<<<<< HEAD

  Definition for an interval.
  public class Interval {
      int start;
      int end;
      Interval() { start = 0; end = 0; }
      Interval(int s, int e) { start = s; end = e; }
  }
 
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if(intervals == null)
            return false;
        Arrays.sort(intervals, new ComparatorInterval(){
            public int compare(Interval a, Interval b) {return a.start - b.start;}});
        for (int i = 0; i  intervals.length-1; i++)
            if (intervals[i].end  intervals[i+1].start)
                return false;
        return true;
    }
=======

  Definition for an interval.
  public class Interval {
      int start;
      int end;
      Interval() { start = 0; end = 0; }
      Interval(int s, int e) { start = s; end = e; }
  }
 
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        if(intervals == null)
            return false;
        Arrays.sort(intervals, new ComparatorInterval(){
            public int compare(Interval a, Interval b) {return a.start - b.start;}});
        for (int i = 0; i  intervals.length-1; i++)
            if (intervals[i].end  intervals[i+1].start)
                return false;
        return true;
    }
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
}