<<<<<<< HEAD
# Definition for singly-linked list.
# class ListNode(object)
#     def __init__(self, x)
#         self.val = x
#         self.next = None

class Solution(object)
    def hasCycle(self, head)
        
        type head ListNode
        rtype bool
        
        slow = fast = head
        while fast and fast.next
            fast = fast.next.next
            slow = slow.next
            if slow == fast
                return True
        return False
        
=======
# Definition for singly-linked list.
# class ListNode(object)
#     def __init__(self, x)
#         self.val = x
#         self.next = None

class Solution(object)
    def hasCycle(self, head)
        
        type head ListNode
        rtype bool
        
        slow = fast = head
        while fast and fast.next
            fast = fast.next.next
            slow = slow.next
            if slow == fast
                return True
        return False
        
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
        