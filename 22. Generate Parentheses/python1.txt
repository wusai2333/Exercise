<<<<<<< HEAD
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        def generate(p, left, right, parens = []):
            if left:  generate(p + '(', left - 1, right)
            if right > left: generate(p + ')', left, right - 1)
            if not right: parens += p,
            return parens
=======
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        def generate(p, left, right, parens = []):
            if left:  generate(p + '(', left - 1, right)
            if right > left: generate(p + ')', left, right - 1)
            if not right: parens += p,
            return parens
>>>>>>> origin/master
        return generate('', n, n)