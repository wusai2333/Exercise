Given the string s, the greedy choice (i.e., the leftmost letter in the answer) is the smallest s[i], s.t.
the suffix s[i .. ] contains all the unique letters. (Note that, when there are more than one smallest s[i]'s, we choose the leftmost one. Why? Simply consider the example: "abcacb".)

After determining the greedy choice s[i], we get a new string s' from s by

removing all letters to the left of s[i],
removing all s[i]'s from s.
We then recursively solve the problem w.r.t. s'.
The runtime is O(26 * n) = O(n).
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        cnt = [0]*26
        pos = 0 # position for the smallest s[i]
        for i in range(len(s)): cnt[ord(s[i])-ord('a')] += 1
        for i in range(len(s)): 
            if ord(s[i]) < ord(s[pos]): pos = i
            cnt[ord(s[i])-ord('a')] -= 1
            if cnt[ord(s[i])-ord('a')] == 0: break
        return "" if len(s) == 0 else s[pos] + self.removeDuplicateLetters(s[pos+1:].replace(s[pos], ""))
            