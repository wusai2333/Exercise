/**
 * dp[i, j] represents the max profit up until prices[j] using at most i transactions. 
 * dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) { jj in range of [0, j-1] }
 *          = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj]))
 * dp[0, j] = 0; 0 transactions makes 0 profit
 * dp[i, 0] = 0; if there is only one price data point you can't make any transaction.
 */

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        l = len(prices)
        if k == 0 or l <= 1:
            return 0
        if k >= l/2:
            return self.quickSolve(k,prices)
            
        dp = [[0]*l for _ in range(k+1)]
        for i in range(1, k+1):
            localMax = dp[i - 1][0] - prices[0];
            for j in range(1, l):
                dp[i][j] = max(dp[i][j - 1], localMax + prices[j])
                localMax = max(localMax, dp[i - 1][j - 1] - prices[j])
        return dp[k][l-1]
            
            
    def quickSolve(self, k, prices):
        l = len(prices)
        profit = 0
        for i in range(1,l):
            if prices[i] > prices[i-1]:
                profit += prices[i] - prices[i - 1]
        return profit
            