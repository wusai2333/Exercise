class Solution(object):
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        houses.sort()
        heaters.sort()
        
        i, j,res = 0, 0, 0
        while i<len(houses):
            while j < len(heaters) - 1 and abs(heaters[j+1] - houses[i]) <= abs(heaters[j] - houses[i]):
                j += 1
            res = max(res, abs(heaters[j] - houses[i]))
            i += 1
        return res
                
  more smarter and concise:      
class Solution(object):
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        houses.sort()
        heaters.sort()
        
        i, res = 0, 0
        for house in houses:
            while i < len(heaters) - 1 and heaters[i] + heaters[i+1] < 2 * house:
                i += 1
            res = max(res, abs(heaters[i] - house))
        return res
                

class Solution(object):
    def findRadius(self, houses, heaters):
        """
        :type houses: List[int]
        :type heaters: List[int]
        :rtype: int
        """
        heaters = sorted(heaters) + [float('inf')]
        
        i, res = 0, 0
        for house in sorted(houses):
            while sum(heaters[i:i+2]) <= 2 * house:
                i += 1
            res = max(res, abs(heaters[i] - house))
        return res
                
        
        