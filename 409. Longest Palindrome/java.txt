<<<<<<< HEAD
public class Solution {
    public int longestPalindrome(String s) {
        if (s == null || s.length()==0) return 0;
        HashSet<Character> hs = new HashSet<Character>();
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(hs.contains(s.charAt(i))) {
                hs.remove(s.charAt(i));
                count++;
            }
            else hs.add(s.charAt(i));
        }
        if (hs.isEmpty()) return 2*count;
        return 2* count + 1;
    }
=======
public class Solution {
    public int longestPalindrome(String s) {
        if (s == null || s.length()==0) return 0;
        HashSet<Character> hs = new HashSet<Character>();
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(hs.contains(s.charAt(i))) {
                hs.remove(s.charAt(i));
                count++;
            }
            else hs.add(s.charAt(i));
        }
        if (hs.isEmpty()) return 2*count;
        return 2* count + 1;
    }
>>>>>>> eb4f20642d79ed3df07dab1830859263475bf5e5
}